"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[886],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||s;return r?a.createElement(h,o(o({ref:t},u),{},{components:r})):a.createElement(h,o({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3675:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const s={sidebar_position:5},o="getAvailablePurchases",i={unversionedId:"api-reference/methods/get-available-purchases",id:"api-reference/methods/get-available-purchases",title:"getAvailablePurchases",description:"Get all purchases made by the user (either non-consumable, consumable and haven't been consumed yet or subscriptions).",source:"@site/docs/api-reference/methods/get-available-purchases.md",sourceDirName:"api-reference/methods",slug:"/api-reference/methods/get-available-purchases",permalink:"/docs/api-reference/methods/get-available-purchases",draft:!1,editUrl:"https://github.com/dooboolab/react-native-iap/edit/main/docs/docs/api-reference/methods/get-available-purchases.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"getSubscriptions",permalink:"/docs/api-reference/methods/get-subscriptions"},next:{title:"getPurchaseHistory",permalink:"/docs/api-reference/methods/get-purchase-history"}},c={},l=[{value:"Signature",id:"signature",level:2},{value:"Usage",id:"usage",level:2},{value:"Restoring purchases",id:"restoring-purchases",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"getavailablepurchases"},(0,n.kt)("inlineCode",{parentName:"h1"},"getAvailablePurchases")),(0,n.kt)("p",null,"Get all purchases made by the user (either non-consumable, consumable and haven't been consumed yet or subscriptions)."),(0,n.kt)("h2",{id:"signature"},"Signature"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getAvailablePurchases(): Promise<Purchase[]>;\n")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {useCallback} from 'react';\nimport {View} from 'react-native';\nimport {getAvailablePurchases} from 'react-native-iap';\n\nconst App = () => {\n  const availablePurchases = useCallback(\n    async () => await getAvailablePurchases(),\n    [],\n  );\n\n  return <View />;\n};\n")),(0,n.kt)("h2",{id:"restoring-purchases"},"Restoring purchases"),(0,n.kt)("p",null,"You can use ",(0,n.kt)("inlineCode",{parentName:"p"},"getAvailablePurchases()"),' to do what\'s commonly understood as "restoring" purchases.'),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"For debugging you may want to consume all items, you have then to iterate over the purchases returned by ",(0,n.kt)("inlineCode",{parentName:"p"},"getAvailablePurchases()"),".")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Beware that if you consume an item without having recorded the purchase in your database the user may have paid for something without getting it delivered and you will have no way to recover the receipt to validate and restore their purchase.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport {Button} from 'react-native';\nimport {getAvailablePurchases,finishTransaction} from 'react-native-iap';\n\nconst App = () => {\n  handleRestore = async () => {\n    try {\n      const purchases = await getAvailablePurchases();\n      const newState = {premium: false, ads: true};\n      let titles = [];\n\n      await Promise.all(purchases.map(async purchase => {\n        switch (purchase.productId) {\n          case 'com.example.premium':\n            newState.premium = true;\n            titles.push('Premium Version');\n            break;\n\n          case 'com.example.no_ads':\n            newState.ads = false;\n            titles.push('No Ads');\n            break;\n\n          case 'com.example.coins100':\n            await finishTransaction(purchase.purchaseToken);\n            CoinStore.addCoins(100);\n        }\n      })\n\n      Alert.alert(\n        'Restore Successful',\n        `You successfully restored the following purchases: ${titles.join(', ')}`,\n      );\n    } catch (error) {\n      console.warn(error);\n      Alert.alert(error.message);\n    }\n  };\n\n  return (\n    <Button title=\"Restore purchases\" onPress={handleRestore} />\n  )\n};\n")))}p.isMDXComponent=!0}}]);